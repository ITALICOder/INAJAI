import torch
from transformers import DistilBertTokenizer, DistilBertModel
import pandas as pd

# Load the tokenizer
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

class SummaryModel(torch.nn.Module):
    def __init__(self, distilbert_model):
        super(SummaryModel, self).__init__()
        self.distilbert = distilbert_model
        self.fc = torch.nn.Linear(distilbert_model.config.hidden_size, 256)
        self.out = torch.nn.Linear(256, tokenizer.vocab_size)  # Output for vocabulary size

    def forward(self, input_ids, attention_mask):
        outputs = self.distilbert(input_ids=input_ids, attention_mask=attention_mask)
        hidden_state = outputs.last_hidden_state  # Full sequence output
        fc_output = torch.relu(self.fc(hidden_state))
        return self.out(fc_output)  # Output shape: (batch_size, seq_len, vocab_size)

# Initialize the model and load weights
distilbert = DistilBertModel.from_pretrained('distilbert-base-uncased')
model = SummaryModel(distilbert)

# Load model weights while ignoring missing or unexpected keys
try: model.load_state_dict(torch.load('website_summary_model.pth'), strict=False)
except RuntimeError as e: print("Error loading model weights:", e)

model.eval()

def generate_summary(input_text):
    inputs = tokenizer(
        input_text,
        add_special_tokens=True,
        max_length=512,  # Same max_length used during training
        padding="max_length",
        truncation=True,
        return_tensors="pt"
    )

    with torch.no_grad():
        outputs = model(input_ids=inputs['input_ids'], attention_mask=inputs['attention_mask'])
        
        # Take the softmax over the output to get probabilities
        outputs = outputs.view(-1, outputs.size(-1))  # Flatten outputs
        predicted_tokens = torch.argmax(outputs, dim=1)  # Get predicted token indices

    # Decode the predicted tokens to form the summary
    summary = tokenizer.decode(predicted_tokens, skip_special_tokens=True)
    return summary

# Example Usage
#input_text = "Website and summary for: Buy a domain to enhance your online presence."
input_text = 'This webpage was generated by the domain owner using Sedo Domain'
print(generate_summary(input_text))
